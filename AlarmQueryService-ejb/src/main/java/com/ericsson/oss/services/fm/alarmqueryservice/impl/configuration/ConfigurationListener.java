/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2015
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/

package com.ericsson.oss.services.fm.alarmqueryservice.impl.configuration;

import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.MAX_HISTORY_ALARMS_SHOWN;
import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.MAX_NES_ALLOWED_PER_HISTORICALALARM_QUERY;
import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.MAX_NES_ALLOWED_PER_INRESTRICTION;
import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.MAX_NES_ALLOWED_PER_OPENALARM_QUERY;
import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.SOLR_CONNECTION_TIMEOUT;
import static com.ericsson.oss.services.fm.alarmqueryservice.impl.constants.ConfigurationConstants.SOLR_QUERY_TIMEOUT;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ericsson.oss.itpf.sdk.config.annotation.ConfigurationChangeNotification;
import com.ericsson.oss.itpf.sdk.config.annotation.Configured;

/**
 *
 * Responsible for updating the configuration parameters based on the change notifications generated by PIB. <br>
 * Below configuration parameters are defined for the query optimization, parameters define max allowed NE's per each Query/InRestriction of
 * Open/Historical Alarms.
 *
 *
 *
 */

@ApplicationScoped
public class ConfigurationListener {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationListener.class);

    // default value is 1500
    @Inject
    @Configured(propertyName = MAX_NES_ALLOWED_PER_OPENALARM_QUERY)
    private Integer maxNEsAllowedPerOpenAlarmQuery;

    // default value is 750
    @Inject
    @Configured(propertyName = MAX_NES_ALLOWED_PER_HISTORICALALARM_QUERY)
    private Integer maxNEsAllowedPerHistoricalAlarmQuery;

    // default value is 3000
    @Inject
    @Configured(propertyName = MAX_NES_ALLOWED_PER_INRESTRICTION)
    private Integer maxNEsAllowedPerInRestriction;

    // default value is 10000
    @Inject
    @Configured(propertyName = MAX_HISTORY_ALARMS_SHOWN)
    private Integer maxNumberOfHistoryAlarmsShown;

    // default value is 15
    @Inject
    @Configured(propertyName = SOLR_CONNECTION_TIMEOUT)
    private Integer solrConnectionTimeout;

    // default value is 60
    @Inject
    @Configured(propertyName = SOLR_QUERY_TIMEOUT)
    private Integer solrQueryTimeout;

    void observeForOpenAlarmNeLimit(@Observes @ConfigurationChangeNotification(
            propertyName = MAX_NES_ALLOWED_PER_OPENALARM_QUERY) final Integer changedValue) {
        LOGGER.info("maxNEsAllowedPerOpenAlarmQuery changed from :: {}  to :: {} ", getMaxNEsAllowedPerOpenAlarmQuery(), changedValue);
        setMaxNEsAllowedPerOpenAlarmQuery(changedValue);
    }

    void observeForHistoricalAlarmNeLimit(@Observes @ConfigurationChangeNotification(
            propertyName = MAX_NES_ALLOWED_PER_HISTORICALALARM_QUERY) final Integer changedValue) {
        LOGGER.info("maxNEsAllowedPerHistoricalAlarmQuery changed from :: {} to  :: {} ", getMaxNEsAllowedPerHistoricalAlarmQuery(), changedValue);
        setMaxNEsAllowedPerHistoricalAlarmQuery(changedValue);
    }

    void observeForInRestrictionNeLimit(@Observes @ConfigurationChangeNotification(
            propertyName = MAX_NES_ALLOWED_PER_INRESTRICTION) final Integer changedValue) {
        LOGGER.info("maxNEsAllowedPerInRestriction changed from :: {} to  :: {} ", getMaxNEsAllowedPerInRestriction(), changedValue);
        setMaxNEsAllowedPerInRestriction(changedValue);
    }

    void observeForInRestrictionHistroicalAlarmsDisplayLimit(@Observes @ConfigurationChangeNotification(
            propertyName = MAX_HISTORY_ALARMS_SHOWN) final Integer changedValue) {
        LOGGER.info("maxNumberOfHistoryAlarmsShown changed from :: {} to  :: {} ", getMaxNumberOfHistoryAlarmsShown(), changedValue);
        maxNumberOfHistoryAlarmsShown = changedValue;
    }

    void observeForSolrConnectionTimeout(@Observes @ConfigurationChangeNotification(
            propertyName = SOLR_CONNECTION_TIMEOUT) final Integer changedValue) {
        LOGGER.info("connectionTimeout(Solr is migrated with ES)  changed from :: {} to  :: {} ", getSolrConnectionTimeout(), changedValue);
        solrConnectionTimeout = changedValue;
    }

    void observeForSolrQueryTimeout(@Observes @ConfigurationChangeNotification(
            propertyName = SOLR_QUERY_TIMEOUT) final Integer changedValue) {
        LOGGER.info("queryTimeout(Solr is migrated with ES)  changed from :: {} to  :: {} ", getSolrQueryTimeout(), changedValue);
        solrQueryTimeout = changedValue;
    }

    public Integer getMaxNEsAllowedPerOpenAlarmQuery() {
        return maxNEsAllowedPerOpenAlarmQuery;
    }

    public void setMaxNEsAllowedPerOpenAlarmQuery(final Integer maxNEsAllowedPerOpenAlarmQuery) {
        this.maxNEsAllowedPerOpenAlarmQuery = maxNEsAllowedPerOpenAlarmQuery;
    }

    public Integer getMaxNEsAllowedPerHistoricalAlarmQuery() {
        return maxNEsAllowedPerHistoricalAlarmQuery;
    }

    public void setMaxNEsAllowedPerHistoricalAlarmQuery(final Integer maxNEsAllowedPerHistoricalAlarmQuery) {
        this.maxNEsAllowedPerHistoricalAlarmQuery = maxNEsAllowedPerHistoricalAlarmQuery;
    }

    public Integer getMaxNEsAllowedPerInRestriction() {
        return maxNEsAllowedPerInRestriction;
    }

    public void setMaxNEsAllowedPerInRestriction(final Integer maxNEsAllowedPerInRestriction) {
        this.maxNEsAllowedPerInRestriction = maxNEsAllowedPerInRestriction;
    }

    public Integer getMaxNumberOfHistoryAlarmsShown() {
        return maxNumberOfHistoryAlarmsShown;
    }

    public Integer getSolrConnectionTimeout() {
        return solrConnectionTimeout;
    }

    public Integer getSolrQueryTimeout() {
        return solrQueryTimeout;
    }
}
